openapi: '3.0.2'

info:
  title: Mahlzeit-API
  description: Simplified Backend API for the Hallo-Mahlzeit.de web app
  version: '2.0'

servers:
  - url: https://api.hallo-mahlzeit.de/v2
  - url: http://localhost:8081/v2

tags:
  - name: Customer
  - name: Order
  - name: Canteen

paths:
  /customer:
    get:
      tags: 
        - 'Customer'
      operationId: getCustomerList
      responses:
        '200':
          description: Returns list of Customer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    
  /customer/{id}:
    get:
      tags:
        - 'Customer'
      operationId: getCustomerByID
      parameters:
        - name: id
          in: path
          description: ID of customer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns a customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
        '400':
          description: Invalid Customer ID

    put:
      tags:
        - 'Customer'
      operationId: addCustomerByID
      parameters:
        - name: id
          in: path
          description: ID of customer
          required: true
          schema:
            type: object
            $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Adds a customer
        '400':
          description: Invalid Customer ID

    delete:
      tags:
        - 'Customer'
      operationId: deleteCustomerByID
      parameters:
        - name: id
          in: path
          description: ID of customer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deletes a customer
        '404': 
          description: Customer not found

  /order:
    get:
      tags:
        - 'Order'
      operationId: getOrderList
      parameters:
        - name: id
          in: path
          description: ID of customer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lists all Orders of a customer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /order/{id}:
    get:
      tags:
        - 'Order'
      operationId: getOrderByID
      parameters:
        - name: id
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
            format: int64
        - name: customerId
          in: header
          description: ID of customer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns a order of a customer
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Order'

    put:
      tags:
        - 'Order'
      operationId: putOrderByID
      parameters:
        - name: id
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
            format: int64
        - name: customerId
          in: query
          description: ID of customer
          required: true
          schema:
            type: integer
            format: int64
        - name: order
          in: header
          description: Order object
          required: true
          schema:
            type: object
            $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Adds a order to a customer
        '400':
          description: Order ID invalid

    delete:
      tags:
        - 'Order'
      operationId: deleteOrderByID
      parameters:
        - name: id
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
            format: int64
        - name: customerId
          in: query
          description: ID of customer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deletes a order of a customer
        '404':
          description: Order not found
  
  /canteen:
    get:
      tags:
        - 'Canteen'
      operationId: getCanteen
      responses:
        '200':
          description: Lists all Canteen
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Canteen'

    put:
      tags:
        - 'Canteen'
      operationId: putCanteen
      parameters:
        - name: id
          in: header
          description: List of Canteen
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Canteen'
      responses:
        '200':
          description: Canteen have been added

components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 341321
        Name:
          type: string
          example: Bob

    Order:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
          example: 341321
        id:
          type: integer
          format: int64
          example: 42
        weight:
          type: integer
          format: int64
          example: 300
        price:
          type: number
          format: double
          example: 3.99
        time:
          type: string
          format: date-time
        description: 
          type: string
          example: "Steak with Fries"

    Canteen:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 01
        location:
          type: string
          example: 
        openHours:
          type: string
          format: time-hour
          example: 10
        closeHours:
          type: string
          format: time-hour
          example: 14
